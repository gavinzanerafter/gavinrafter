{"version":3,"sources":["webpack:///./src/components/bio.tsx","webpack:///./src/pages/index.tsx"],"names":["Bio","query","render","data","description","site","siteMetadata","pageQuery","Index","siteTitle","title","posts","allMarkdownRemark","edges","keywords","className","map","node","frontmatter","fields","slug","key","to","date","dangerouslySetInnerHTML","__html","summary"],"mappings":"2KAkCeA,EAvBO,kBACpB,kBAAC,cAAD,CACEC,MAAK,aASLC,OAAQ,SAACC,GAAqD,IACrDC,EAAeD,EAAKE,KAAKC,aAAzBF,YACP,OACE,6BACE,4BAAKA,GACL,gDAfR,UCZF,0CAWA,IAmDaG,EAAY,aA4BVC,UA/EgB,SAAC,GAAW,IAAVL,EAAU,EAAVA,KACzBM,EAAYN,EAAKE,KAAKC,aAAaI,MACnCC,EAAQR,EAAKS,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQH,MAAOD,GACb,kBAAC,IAAD,CAAMC,MAAM,YAAYI,SAAU,CAAC,OAAD,iCAClC,kBAAC,EAAD,MACA,iCACE,yBAAKC,UAAS,gBACXJ,EAAMK,KAAI,YAAY,IAAVC,EAAU,EAAVA,KACLP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KACpD,OACE,yBAAKC,IAAKJ,EAAKE,OAAOC,MACpB,4BACE,kBAAC,OAAD,CAAME,GAAIL,EAAKE,OAAOC,MAAOV,IAE/B,+BAAQO,EAAKC,YAAYK,MACzB,uBAAGC,wBAAyB,CAACC,OAAQR,EAAKC,YAAYQ,QAAU,kB","file":"component---src-pages-index-tsx-6a2561ddd8e924ecb8d9.js","sourcesContent":["import React from 'react'\nimport {StaticQuery, graphql} from 'gatsby'\n\ntype StaticQueryData = {\n  site: {\n    siteMetadata: {\n      description: string\n    }\n  }\n}\n\nconst Bio: React.FC = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            description\n          }\n        }\n      }\n    `}\n    render={(data: StaticQueryData): React.ReactElement | null => {\n      const {description} = data.site.siteMetadata\n      return (\n        <div>\n          <h1>{description}</h1>\n          <p>By Gavin Rafter</p>\n        </div>\n      )\n    }}\n  />\n)\n\nexport default Bio\n","import React from 'react'\nimport {Link, graphql} from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Head from '../components/head'\nimport Bio from '../components/bio'\n\ninterface Props {\n  readonly data: PageQueryData\n}\n\nconst Index: React.FC<Props> = ({data}) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout title={siteTitle}>\n      <Head title=\"All posts\" keywords={[`blog`, `gatsby`, `javascript`, `react`]} />\n      <Bio />\n      <article>\n        <div className={`page-content`}>\n          {posts.map(({node}) => {\n            const title = node.frontmatter.title || node.fields.slug\n            return (\n              <div key={node.fields.slug}>\n                <h3>\n                  <Link to={node.fields.slug}>{title}</Link>\n                </h3>\n                <small>{node.frontmatter.date}</small>\n                <p dangerouslySetInnerHTML={{__html: node.frontmatter.summary + '...'}} />\n              </div>\n            )\n          })}\n        </div>\n      </article>\n    </Layout>\n  )\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        fields: {\n          slug: string\n        }\n        frontmatter: {\n          date: string\n          summary: string\n          title: string\n        }\n      }\n    }[]\n  }\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: {frontmatter: {published: {ne: false}}}\n      sort: {fields: [frontmatter___date], order: DESC}\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 146)\n          fields {\n            slug\n          }\n          frontmatter {\n            summary\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Index\n"],"sourceRoot":""}